function yout = poolDataVar(yin,yVar,polyorder)
%% Variance of polynomial dictionary generated by poolData
%  assuming each column of yin are independent random variables.
%  Variance are calculated by algebra of random variables.
%
%  INPUT
%     yin   Values of random variables [# of Pts (n) x # of Variables (nVars)]
%           (each column represents 1 variable, 
%            each row represents a single realisation)
%
%     yVar  Variance of random variables [Same dimensions as yin]
% 
%     polyorder   Maximum degree of polynomial
%  OUTPUT
%     yout  Variance of the polynomial dictionary
%
% Copyright 2023, All Rights Reserved
%
% Code by Lloyd Fung
% Loosely based on code found in the Paper, "Discovering Governing Equations from Data: 
%        Sparse Identification of Nonlinear Dynamical Systems"
% by S. L. Brunton, J. L. Proctor, and J. N. Kutz

n = size(yin,1);
nVars = size(yin,2);

ind = 1;
% poly order 0
yout(:,ind) = zeros(n,1);
ind = ind+1;

% poly order 1
for i=1:nVars
    yout(:,ind) = yVar(:,i);
    ind = ind+1;
end

if(polyorder>=2)
    % poly order 2
    for i=1:nVars
        for j=i:nVars
            if i==j
                yout(:,ind) = VarPNormal(yin(:,i),yVar(:,i),2);
            else
                yout(:,ind) = yVar(:,i) .* yVar(:,j) + yVar(:,i) .* yin(:,j).^2 + yVar(:,j) .* yin(:,i).^2;
            end
            ind = ind+1;
        end
    end
end

if(polyorder>=3)
    % poly order 3
    for i=1:nVars
        for j=i:nVars
            for k=j:nVars
                ind_list = [i j k];
                [uni_list,~,ic] = unique(ind_list);
                count_list = accumarray(ic,1);
                
                yout(:,ind) = VarPNormal(yin(:,uni_list(1)),yVar(:,uni_list(1)),count_list(1));
                yval = yin(:,uni_list(1)).^count_list(1);
                
                for ii=2:length(uni_list)
                    yVar_ = VarPNormal(yin(:,uni_list(ii)),yVar(:,uni_list(ii)),count_list(ii));
                    yval_ = yin(:,uni_list(ii)).^count_list(ii);
                    yout(:,ind) = yout(:,ind) .* yVar_ + yout(:,ind) .* yval_.^2 + yVar_ .* yval.^2;
                    yval = yval.*yval_;
                end
                ind = ind+1;
            end
        end
    end
end

if(polyorder>=4)
    % poly order 4
    for i=1:nVars
        for j=i:nVars
            for k=j:nVars
                for l=k:nVars
                    ind_list = [i j k l];
                    [uni_list,~,ic] = unique(ind_list);
                    count_list = accumarray(ic,1);
                    
                    yout(:,ind) = VarPNormal(yin(:,uni_list(1)),yVar(:,uni_list(1)),count_list(1));
                    yval = yin(:,uni_list(1)).^count_list(1);
                    
                    for ii=2:length(uni_list)
                        yVar_ = VarPNormal(yin(:,uni_list(ii)),yVar(:,uni_list(ii)),count_list(ii));
                        yval_ = yin(:,uni_list(ii)).^count_list(ii);
                        yout(:,ind) = yout(:,ind) .* yVar_ + yout(:,ind) .* yval_.^2 + yVar_ .* yval.^2;
                        yval = yval.*yval_;
                    end
                    ind = ind+1;
                end
            end
        end
    end
end

if(polyorder>=5)
    % poly order 5
    for i=1:nVars
        for j=i:nVars
            for k=j:nVars
                for l=k:nVars
                    for m=l:nVars
                        ind_list = [i j k l m];
                        [uni_list,~,ic] = unique(ind_list);
                        count_list = accumarray(ic,1);
                        
                        yout(:,ind) = VarPNormal(yin(:,uni_list(1)),yVar(:,uni_list(1)),count_list(1));
                        yval = yin(:,uni_list(1)).^count_list(1);
                        
                        for ii=2:length(uni_list)
                            yVar_ = VarPNormal(yin(:,uni_list(ii)),yVar(:,uni_list(ii)),count_list(ii));
                            yval_ = yin(:,uni_list(ii)).^count_list(ii);
                            yout(:,ind) = yout(:,ind) .* yVar_ + yout(:,ind) .* yval_.^2 + yVar_ .* yval.^2;
                            yval = yval.*yval_;
                        end
                        ind = ind+1;
                    end
                end
            end
        end
    end
end

end

